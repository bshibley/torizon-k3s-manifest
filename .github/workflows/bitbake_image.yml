# This is a basic workflow to help you get started with Actions

name: torizon-k3s-manifest_ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "kirkstone-6.x.y" branch
  push:
    branches: [ "kirkstone-6.x.y" ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        branch: [kirkstone-6.x.y]
        machine: [verdin-imx8mp]
        recipe: [torizon-core-k3s-host]
    env:
      name: build
      MACHINE: ${{ matrix.machine }}
      BRANCH: ${{ matrix.branch }}
      RECIPE: ${{ matrix.recipe }}
    container:
      image: torizon/crops:kirkstone-6.x.y
      options: --user root
      volumes:
        - /share/sstate-cache:/share/sstate-cache 
        - /share/source-download:/share/source-download
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Environment prep
        run: |
          useradd -u 1000 -m torizon
          ln -s /share/source-download downloads
          ln -s /share/sstate-cache sstate-cache

      - name: Initialize Repository
        run: su torizon -c "repo init -u file://$GITHUB_WORKSPACE -b ${BRANCH} -m default.xml"
          
      - name: Repo Sync
        run: su torizon -c "repo sync"

      - name: Build the Image
        run: |
          su torizon -c " \
            MACHINE=${MACHINE} EULA=1 source layers/meta-toradex-torizon/scripts/setup-environment build && \
            cp ../layers/meta-torizon-k3s/conf/template/bblayers.conf conf/bblayers.conf && \
            echo \"SSTATE_DIR ?= \\\"/share/sstate-cache\\\"\" >> conf/local.conf && \
            echo \"DL_DIR ?= \\\"/share/source-download\\\"\" >> conf/local.conf && \
            bitbake ${RECIPE}"

